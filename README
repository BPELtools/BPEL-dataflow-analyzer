BPELDataFlowAnalyzer
--------------------

Version: 0.1 2008-08-04
Author: Sebastian Breier
License: Apache License 2.0
E-mail: Sebastian.Breier@gmx.net

This program implements a data flow analysis algorithm on BPEL processes as described in diploma
thesis DIP-2726 (Uni Stuttgart), retrievable from
http://www.informatik.uni-stuttgart.de/cgi-bin/NCSTRL/NCSTRL_view.pl?id=DIP-2726&mod=0&hi=32373236.

   Copyright 2008 Sebastian Breier

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

Introduction
------------
You should definitely read DIP-2726 to understand the purpose and internal working of the program.
The program uses the Eclipse BPEL project's EMF (Eclipse Modeling Framework) model to analyze BPEL
processes.

This README will explain how to use the software and how to build and extend it yourself.

Unfortunately, the software has some limitations and is still unfinished.
(Most activity types are not yet supported, STUB methods are unfinished)

This program depends on:
- Java 6
- org.eclipse.bpel.model v20070824_M3
(Which depends on - org.eclipse.bpel.common.model v20070824_M3
                  - org.eclipse.bpel.common.ui v20070824_M3)
- org.eclipse.emf.common 2.3.2.v200802051830
- org.eclipse.emf.ecore 2.3.2.v200802051830
- org.eclipse.wst.wsdl 1.1.101.v200801152132
- org.eclipse.emf.ecore.xml 2.3.2.v200802051830
Usage with other libraries and/or versions may fail or vary your experience. :)

Use it
------
Because of the dependency on the Eclipse BPEL project, this program will only run in Eclipse.
There are probably ways of running it without Eclipse, but so far I have not found out how.
1. Install Eclipse Europa Winter (aka version 3.3.2) JEE version
2. Pull the source for Eclipse BPEL
  See http://www.eclipse.org/bpel/install.php on how to do this.
  Basically, connect to :pserver:anonymous@dev.eclipse.org:/cvsroot/technology,
  check out from org.eclipse.bpel/plugins:
  - org.eclipse.bpel.common.ui
  - org.eclipse.bpel.model
  - org.eclipse.bpel.common.model
  DO NOT check out the HEAD revisions.
  Check out the branch/revision for v20070824_M3, milestone M3 or just "version 0.3".
  HEAD revisions might somehow work, but I have not tried.
3. Import the BPELDataFlowAnalyzer project into Eclipse.
4. Edit the Build Path of BPELDataFlowAnalyzer.
  Add the checked out parts of Eclipse BPEL project.
  Add the org.eclipse.emf.* and org.eclipse.wst.wsdl dependencies as described above.
  The JAR files can be found in the eclipse/plugins directory.
5. Edit "Analyzer.java" method "main" to contain the right paths and file names to your BPEL process
  and the variable list file. 
6. Edit the variable list file to contain a list of the variables to analyze.
7. Run "Analyzer.java" as Java application.

Restrictions
------------
So far, the only things implemented are:
- Most parts of the infrastructure (sets, tuples, flags, ...)
- HandleActivity (without sequences, only for basic activities, process & flow activities)
- MergeData (without sequence, no join condition analysis at all)
- PurgeDuplicatesOR
- HandleBasicActivity analysis (but only general & receive activities)
- HandleFlow activity analysis (without HandleEndOfFlow)
- AnalyzeProcessModel

Not implemented are:
- Any join condition / expression analysis
- HandleSuccessors
- overWrite
- Many activity handlers

Extend it
---------
When you got it to run, you can also extend the program easily.

Some words about architecture:
- The Analyzer class is just startup code which loads the BPEL file through Eclipse BPEL project and
starts analysis.
- The classes in the infrastructure package are necessary to encapsulate the analysis algorithm
  infrastructure, such as saving the writer state, objects for saving activity flags, and so on.
- The classes in the analysis package are the actual analysis algorithms presented in DIP-2726.

Class "State" is a singleton that saves the state of the analysis.
It maps "Placements" to write tuples (consisting of poss, dis, inv, mbd, as in the thesis).
Placements are tuples consisting of one activity and an enum instance "IN", "OUT", or "TEMP".
This way, it is possible for "State" to save and retrieve writes_in/writes_out/writes_tmp tuples
for each activity.
"State" also maps activities to a set of flags.
Also, it saves variables to analyze.
"State" also contains various methods for retrieving and saving the described data.
Please see usage examples of the "State" class in many methods for more information. 

The variables are nested in a hierarchy.
This means that each variable object can contain references to sub-variables.
Unfortunately, it is not possible for the analyzer to identify the parts of WSDL variables, so the
variables and sub-variables have to be listed successively in the variable list file that the
analyzer startup reads (see MotivatingExample.vars).

analysis.Utility contains several interesting utility methods:
- dumpSet will pretty-print a set of ExtensibleElements (activity and process elements)
- dumpEE will pretty-print an ExtensibleElement
- others

Most methods contain a debug line that gets printed when they are called.
Some are commented out, some (especially STUBs) are not.

Conclusion
----------
While the program is not complete yet, I believe it has a viable structure for future development.