BPELDataFlowAnalyzer
--------------------
This program implements a data flow analysis algorithm on BPEL processes.

The fundamentals of the algorithm are described in:
Kopp, Oliver; Khalaf, Rania; Leymann, Frank: Deriving Explicit Data Links in WS-BPEL Processes. In: Proceedings of the International Conference on Services Computing, SCC 2008

The algorithm has been extended by Sebastian Breier in the diploma thesis DIP-2726 at University of Stuttgart. Retrievable from
http://www2.informatik.uni-stuttgart.de/cgi-bin/NCSTRL/NCSTRL_view.pl?id=DIP-2726&eng=1

The implementation has been extended by Gao Yangyang in the student thesis STUD-2246 at University of Stuttgart. Retrievable from
http://www2.informatik.uni-stuttgart.de/cgi-bin/NCSTRL/NCSTRL_view.pl?id=STUD-2246&engl=1

The theses have been supervised by Oliver Kopp.

See http://www.iaas.uni-stuttgart.de/ for links on the paper and theses.

Copyright
---------
   Copyright 2008 Sebastian Breier
   Copyright 2010 Gao Yangyang

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

Released Versions
-----------------
Version: 0.2 2010-02-25
Author: Gao Yangyang
License: Apache License 2.0
E-mail: jigong_liang@hotmail.com

Version: 0.1 2008-08-04
Author: Sebastian Breier
License: Apache License 2.0
E-mail: Sebastian.Breier@gmx.net

   
Introduction
------------
You should definitely read DIP-2726 to understand the purpose and internal working of the program.
The program uses the Eclipse BPEL project's EMF (Eclipse Modeling Framework) model to analyze BPEL
processes.

This README will explain how to use the software and how to build and extend it yourself.

Unfortunately, the software has some limitations and is still unfinished.
However, most activity types are supported.

Extend it
---------
When you got it to run, you can also extend the program easily.

Some words about architecture:
- The Analyzer class is just startup code which loads the BPEL file through Eclipse BPEL project and
starts analysis.
- The classes in the infrastructure package are necessary to encapsulate the analysis algorithm
  infrastructure, such as saving the writer state, objects for saving activity flags, and so on.
- The classes in the analysis package are the actual analysis algorithms presented in DIP-2726.

Class "State" is a singleton that saves the state of the analysis.
It maps "Placements" to write tuples (consisting of poss, dis, inv, mbd, as in the thesis).
Placements are tuples consisting of one activity and an enum instance "IN", "OUT", or "TEMP".
This way, it is possible for "State" to save and retrieve writes_in/writes_out/writes_tmp tuples
for each activity.
"State" also maps activities to a set of flags.
Also, it saves variables to analyze.
"State" also contains various methods for retrieving and saving the described data.
Please see usage examples of the "State" class in many methods for more information. 

The variables are nested in a hierarchy.
This means that each variable object can contain references to sub-variables.
Unfortunately, it is not possible for the analyzer to identify the parts of WSDL variables, so the
variables and sub-variables have to be listed successively in the variable list file that the
analyzer startup reads (see MotivatingExample.vars).

analysis.Utility contains several interesting utility methods:
- dumpSet will pretty-print a set of ExtensibleElements (activity and process elements)
- dumpEE will pretty-print an ExtensibleElement
- others

Most methods contain a debug line that gets printed when they are called.
Some are commented out, some (especially STUBs) are not.
